"""Amber relaxation utility script.

Relaxes a PDB file using DeepFold's AmberRelaxation routine and writes the
relaxed structure to disk.

Example
-------
python relax_protein.py unrelaxed.pdb relaxed.pdb --summary model_summary.json
"""

from __future__ import annotations

import argparse
import json
import logging
import sys
import time
from pathlib import Path
from typing import Final

import numpy as np

from deepfold.common import protein
from deepfold.relax import relax
from deepfold.utils.log_utils import setup_logging

logger: Final = logging.getLogger(__name__)


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Run Amber relaxation on a PDB structure generated by DeepFold.")
    parser.add_argument("input", type=Path, help="Unrelaxed PDB file")
    parser.add_argument("output", type=Path, help="Path to write relaxed PDB file")
    parser.add_argument(
        "--summary",
        type=Path,
        metavar="JSON",
        help="Optional DeepFold JSON summary with chain/residue indices and pLDDT.",
    )
    parser.add_argument(
        "--device",
        choices=("cpu", "cuda"),
        default="cuda",
        help="Device for Amber force-field computations (default: cuda)",
    )
    return parser.parse_args()


def load_summary(summary_path: Path) -> tuple[np.ndarray, np.ndarray, np.ndarray]:
    """Load chain, residue and pLDDT arrays from a DeepFold JSON summary."""
    with summary_path.open() as fp:
        summary = json.load(fp)
    return (
        np.asarray(summary["chain_index"]),
        np.asarray(summary["residue_index"]),
        np.asarray(summary["plddt"]),
    )


def prepare_indices(
    unrelaxed: protein.Protein,
    summary_path: Path | None = None,
) -> tuple[np.ndarray | None, np.ndarray, np.ndarray]:
    """Return chain, residue and B-factor arrays for the relaxed structure."""
    if summary_path is not None:
        logger.info("Loading summary information from %s", summary_path)
        return load_summary(summary_path)

    # Fallback to values embedded in the PDB produced by DeepFold
    chain_idx = unrelaxed.chain_index.copy() if unrelaxed.chain_index is not None else None
    return chain_idx, unrelaxed.residue_index.copy(), unrelaxed.b_factors.copy()


def relax_protein(
    input_path: Path,
    output_path: Path,
    *,
    device: str = "cuda",
    summary_path: Path | None = None,
) -> None:
    """Run Amber relaxation and write out the relaxed structure."""
    if output_path.exists():
        raise FileExistsError(f"Output file already exists: {output_path}")

    pdb_string = input_path.read_text()
    unrelaxed = protein.from_pdb_string(pdb_string)

    chain_idx, residue_idx, plddt = prepare_indices(unrelaxed, summary_path)

    relaxer = relax.AmberRelaxation(
        max_iterations=0,
        tolerance=2.39,
        stiffness=10.0,
        exclude_residues=[],
        max_outer_iterations=20,
        use_gpu=device != "cpu",
    )

    start = time.perf_counter()
    relaxed_pdb, *_ = relaxer.process(prot=unrelaxed)
    logger.info("Relaxation completed in %.2f s", time.perf_counter() - start)

    relaxed_prot = protein.from_relaxation(
        relaxed_pdb,
        residue_index=residue_idx,
        chain_index=chain_idx,
        b_factors=plddt,
    )
    output_path.write_text(protein.to_pdb(relaxed_prot))
    logger.info("Relaxed structure written to %s", output_path)


def _main() -> None:
    args = parse_arguments()
    setup_logging("relax.log")
    relax_protein(
        input_path=args.input,
        output_path=args.output,
        device=args.device,
        summary_path=args.summary,
    )


if __name__ == "__main__":
    try:
        _main()
    except Exception as exc:  # pylint: disable=broad-except
        logger.exception("Relaxation failed: %s", exc)
        sys.exit(1)
