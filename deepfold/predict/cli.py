"""Command‑line interface handling."""

from __future__ import annotations

import argparse
from pathlib import Path

from .presets import VALID_PRESETS

_DEF_PRECISION = "fp32"


def build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="DeepFold prediction runner (refactored)")
    parser.add_argument(
        "-i",
        "--input-features",
        dest="input_features_filepath",
        type=Path,
        required=True,
        help="Path to input feature pickle generated by sequence alignment processing.",
    )
    parser.add_argument(
        "-o",
        "--output-dir",
        dest="output_dirpath",
        type=Path,
        required=True,
        help="Directory that will receive prediction outputs.",
    )
    parser.add_argument(
        "-p",
        "--params-dir",
        dest="params_dirpath",
        type=Path,
        required=True,
        help="Directory that contains *.npz parameter archives.",
    )
    parser.add_argument(
        "--preset",
        type=str,
        choices=VALID_PRESETS,
        required=True,
        help="Model preset key (see README).",
    )
    # ---------------------------------------------------------------------
    # Optional fine‑tuning parameters
    # ---------------------------------------------------------------------
    parser.add_argument("--seed", type=int, default=-1, help="Global PRNG seed (‑1 = random)")
    parser.add_argument("--mp-size", type=int, default=0, help="Tensor parallel group size (0 = disabled)")
    parser.add_argument(
        "--precision",
        type=str,
        choices=("fp32", "bf16", "tf32"),
        default=_DEF_PRECISION,
        help="Floating‑point precision used during inference.",
    )
    parser.add_argument("--max-recycling-iters", type=int, default=-1, help="Override recycling iterations")
    parser.add_argument("--suffix", type=str, default="", help="Suffix appended to output filenames")
    parser.add_argument("--force", action="store_true", help="Overwrite existing output directory")
    # Flags
    parser.add_argument("--save-recycle", action="store_true", help="Write PDB for every recycle")
    parser.add_argument("--save-all", action="store_true", help="Write MSA/pair representations to result file")
    parser.add_argument("--subsample-templates", action="store_true", help="Sub‑sample templates")
    parser.add_argument("--use-multimer-templates", dest="multimer_templates", type=str, default="")
    parser.add_argument("--benchmark", action="store_true", help="Skip writing heavy output pickle (timing only)")
    parser.add_argument("--debug", action="store_true", help="Write intermediate batch pickle for troubleshooting")
    parser.add_argument("--flags", type=str, default="", help="Comma‑separated list of flags")
    return parser


def parse_args(argv: list[str] | None = None) -> argparse.Namespace:  # pragma: no cover
    parser = build_parser()
    args = parser.parse_args(argv)
    # Post‑processing / validation
    if args.mp_size not in (0, 1, 2, 4, 8):
        parser.error("--mp-size must be 0, 1, 2, 4 or 8")
    return args
